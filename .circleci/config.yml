# Use the latest 2.1 version of CircleCI pipeline process engine. 
# See: https://circleci.com/docs/2.0/configuration-reference
version: 2.1

# Orbs are reusable packages of CircleCI configuration that you may share across projects, enabling you to create encapsulated, parameterized commands, jobs, and executors that can be used across multiple projects.
orbs:
  node: circleci/node@4.7.0
  android: circleci/android@1.0.3

jobs:
  # Below is the definition of your job to build and test your app, you can rename and customize it as you want.
  node:  
    # These next lines define the Android machine image executor: https://circleci.com/docs/2.0/executor-types/
    executor:
      name: node/default

    steps:
      # Checkout the code as the first step.
      - checkout
      - restore_cache:
          key: dependency-cache-{{ checksum "package.json" }}
      - run:
          command: npm install
      - save_cache:
          key: dependency-cache-{{ checksum "package.json" }}
          paths:
            - ./node_modules
      - run: npm run lint
      - run:
          name: Install JUnit coverage reporter
          command: npm i jest-junit -D
      - run:
          name: Run tests with JUnit as reporter
          command: ./node_modules/.bin/jest --ci --runInBand --reporters=default --reporters=jest-junit
          environment:
            JEST_JUNIT_OUTPUT_DIR: ./reports/junit/
      - store_test_results:
          path: ./reports/junit/
      - persist_to_workspace:
          root: ~/project
          paths:
            - node_modules
 
  macos-build-and-test:
    working_directory: ~/project/ios
    macos:
      xcode: 11.3.0
    steps:
      - checkout:
          path: ~/project
      - attach_workspace:
          at: ~/project
      - restore_cache:
          key: pods-v1-{{ checksum "ios/Podfile.lock" }}-{{ arch }}
      - run:
          command: pod install
          working_directory: ios
      - save_cache:
          key: pods-v1-{{ checksum "ios/Podfile.lock" }}-{{ arch }}
          paths:
            - ios/Pods
      - run: nvm alias default node --lts # step up node
      - run: brew install librsvg && imagemagick
      - run: pip install pysvg

  android-build-and-test:
    working_directory: ~/project/android/ScratchJr
    executor:
      name: android/android-machine
      resource-class: large
    steps:
      - checkout:
          path: ~/project
      - attach_workspace:
          at: ~/project
      - run:
          name: Install Softwares
          command: |
            sudo apt update
            sudo apt install imagemagick librsvg2-bin
            pip install pysvg

      - run: sudo ln -s $(which node) /usr/local/bin/node

      # TODO: run tests on more different system images
      # - run:
      #     name: Show list of system-images
      #     command: sdkmanager --list --verbose | grep system-images

      # The next step will run the unit tests
      - android/run-tests:
          test-command: ./gradlew lint test --continue
          max-tries: 1

      # Then start the emulator and run the Instrumentation tests!
      - android/start-emulator-and-run-tests:
          post-emulator-launch-assemble-command: ./gradlew assembleFreeDebugAndroidTest
          test-command: ./gradlew connectedFreeDebugAndroidTest
          system-image: system-images;android-30;google_apis;x86
          max-tries: 2

      # Store Android instrumented test results
      - store_artifacts:
          path: app/build/reports/androidTests/

workflows:
  # Below is the definition of your workflow.
  # Inside the workflow, you provide the jobs you want to run, e.g this workflow runs the build-and-test job above.
  # CircleCI will run this workflow on every commit.
  # For more details on extending your workflow, see the configuration docs: https://circleci.com/docs/2.0/configuration-reference/#workflows
  node-android-ios:
    jobs:
      - node
      - android-build-and-test:
          requires:
            - node
      # - macos-build-and-test:
      #     requires:
      #       - node
