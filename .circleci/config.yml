# Use the latest 2.1 version of CircleCI pipeline process engine. 
# See: https://circleci.com/docs/2.0/configuration-reference
version: 2.1

# Orbs are reusable packages of CircleCI configuration that you may share across projects, enabling you to create encapsulated, parameterized commands, jobs, and executors that can be used across multiple projects.
orbs:
  node: circleci/node@4.7.0
  android: circleci/android@1.0.3

jobs:
  # Below is the definition of your job to build and test your app, you can rename and customize it as you want.
  node:  
    # These next lines define the Android machine image executor: https://circleci.com/docs/2.0/executor-types/
    executor:
      name: node/default

    steps:
      # Checkout the code as the first step.
      - checkout
      - restore_cache:
          key: dependency-cache-{{ checksum "package.json" }}
      - run:
          command: npm install
      - save_cache:
          key: dependency-cache-{{ checksum "package.json" }}
          paths:
            - ./node_modules
      - run: npm run lint
      - run:
          name: Install JUnit coverage reporter
          command: npm i jest-junit -D
      - run:
          name: Run tests with JUnit as reporter
          command: ./node_modules/.bin/jest --ci --runInBand --reporters=default --reporters=jest-junit
          environment:
            JEST_JUNIT_OUTPUT_DIR: ./reports/junit/
      - store_test_results:
          path: ./reports/junit/
      - persist_to_workspace:
          root: ~/project
          paths:
            - node_modules
 
  macos-build-and-test:
    working_directory: ~/project/ios
    macos:
      xcode: 11.3.0
    steps:
      - checkout:
          path: ~/project
      - attach_workspace:
          at: ~/project
      - restore_cache:
          key: pods-v1-{{ checksum "ios/Podfile.lock" }}-{{ arch }}
      - run:
          command: pod install
          working_directory: ios
      - save_cache:
          key: pods-v1-{{ checksum "ios/Podfile.lock" }}-{{ arch }}
          paths:
            - ios/Pods
      - run: nvm alias default node --lts # step up node
      - run: brew install librsvg && imagemagick
      - run: pip install pysvg

  android-build-and-test:
    working_directory: ~/project/android/ScratchJr
    executor:
      name: android/android
      sdk-version: "30"
      variant: node
    steps:
      - checkout:
          path: ~/project
      - attach_workspace:
          at: ~/project
      - run:
          name: install imagemagick
          command: sudo apt update && sudo apt install imagemagick librsvg2-bin
      - run:
          name: install pysvg
          command: sudo pip install pysvg
      - restore_cache:
          key: jars-{{ checksum "build.gradle" }}-{{ checksum  "app/build.gradle" }}
      - run:
          name: Run Unit Test
          command: ./gradlew lint test --continue
      - run:
          name: Save test results
          command: |
            mkdir -p ~/test-results/junit/
            find . -type f -regex ".*/build/test-results/.*xml" -exec cp {} ~/test-results/junit/ \;
          when: always
      - store_test_results:
          path: ~/test-results
      - store_test_results: # for display in Test Summary: https://circleci.com/docs/2.0/collect-test-data/
          path: app/build/reports
      - run:
          name: Build debug APK
          command: ./gradlew :app:assembleDebug :app:assembleFreeDebugAndroidTest
      - save_cache:
          paths:
            - ~/.gradle
          key: jars-{{ checksum "build.gradle" }}-{{ checksum  "app/build.gradle" }}
      - persist_to_workspace:
          root: ~/project
          paths:
            - android/ScratchJr/app/build/outputs/apk
      - store_artifacts:
          path: app/build/outputs/apk

  android-ui-test:
    working_directory: ~/project/android/ScratchJr
    executor:
      name: android/android-machine
    steps:
      - checkout:
          path: ~/project
      - attach_workspace:
          at: ~/project
      - android/create-avd:
          system-image: system-images;android-29;default;x86
          avd-name: test
          install: true
      - android/start-emulator:
          avd-name: test
          no-window: true
          post-emulator-launch-assemble-command: echo "emulater is ready."
      - run:
          name: Install APKs
          command: |
            adb install app/build/outputs/apk/free/debug/app-free-debug.apk; 
            adb install app/build/outputs/apk/androidTest/free/debug/app-free-debug-androidTest.apk;
      - run: 
          name: Run Instrument Test
          command: |
            adb shell am instrument -w org.scratchjr.androidfree.test/androidx.test.runner.AndroidJUnitRunner > app/build/result.txt;
            cat app/build/result.txt;
            fail=$((grep -rn "FAILURES\!\!\!" app/build/result.txt || true) | wc -l);
            if [[ $fail -gt 0 ]]; then
              exit 1;
            fi
      - store_artifacts:
          path: app/build/result.txt

workflows:
  # Below is the definition of your workflow.
  # Inside the workflow, you provide the jobs you want to run, e.g this workflow runs the build-and-test job above.
  # CircleCI will run this workflow on every commit.
  # For more details on extending your workflow, see the configuration docs: https://circleci.com/docs/2.0/configuration-reference/#workflows
  node-android-ios:
    jobs:
      - node
      - android-build-and-test:
          requires:
            - node
      - android-ui-test:
          requires:
            - android-build-and-test
      # - macos-build-and-test:
      #     requires:
      #       - node
